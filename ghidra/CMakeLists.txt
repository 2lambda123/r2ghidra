
option(BUILD_DECOMPILE_EXECUTABLE "Build \"decompile\" executable as used by Ghidra (not needed for r2)" OFF)

################################################################################
# see Ghidra/Features/Decompiler/build.gradle in Ghidra source

set(DECOMPILER_SOURCE_CXX
		# xml.cc				// generated by yacc task
		space.cc
		float.cc
		address.cc
		pcoderaw.cc
		translate.cc
		opcodes.cc
		globalcontext.cc
		capability.cc
		architecture.cc
		options.cc
		graph.cc
		cover.cc
		block.cc
		cast.cc
		typeop.cc
		database.cc
		cpool.cc
		comment.cc
		fspec.cc
		action.cc
		loadimage.cc
		# grammar.cc	 // doesn't seem to be used
		varnode.cc
		op.cc
		type.cc
		variable.cc
		varmap.cc
		jumptable.cc
		emulate.cc
		emulateutil.cc
		flow.cc
		userop.cc
		funcdata.cc
		funcdata_block.cc
		funcdata_varnode.cc
		funcdata_op.cc
		pcodeinject.cc
		heritage.cc
		prefersplit.cc
		rangeutil.cc
		ruleaction.cc
		subflow.cc
		blockaction.cc
		merge.cc
		double.cc
		coreaction.cc
		condexe.cc
		override.cc
		dynamic.cc
		crc32.cc
		prettyprint.cc
		printlanguage.cc
		printc.cc
		printjava.cc
		memstate.cc
		opbehavior.cc
		paramid.cc
		inject_ghidra.cc
		ghidra_translate.cc
		loadimage_ghidra.cc
		typegrp_ghidra.cc
		database_ghidra.cc
		ghidra_context.cc
		cpool_ghidra.cc
		comment_ghidra.cc
		# callgraph.cc			// uncomment for debug
		# ifacedecomp.cc		// uncomment for debug
		# ifaceterm.cc			// uncomment for debug
		# interface.cc			// uncomment for debug
		)

# Source specific to Ghidra
set(DECOMPILER_SOURCE_GHIDRA_CXX
		ghidra_process.cc
		ghidra_arch.cc)

set(DECOMPILER_SOURCE_YACC
		xml.y)

set(DECOMPILER_SOURCE_DIR ghidra/Ghidra/Features/Decompiler/src/decompile/cpp)

################################################################################

list(TRANSFORM DECOMPILER_SOURCE_CXX PREPEND "${DECOMPILER_SOURCE_DIR}/")
list(TRANSFORM DECOMPILER_SOURCE_GHIDRA_CXX PREPEND "${DECOMPILER_SOURCE_DIR}/")
set(SOURCE "${DECOMPILER_SOURCE_CXX}")

find_package(BISON REQUIRED)
file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bison")
foreach(yacc_file ${DECOMPILER_SOURCE_YACC})
	get_filename_component(yacc_name "${yacc_file}" NAME_WLE)
	BISON_TARGET(${yacc_name}
			"${DECOMPILER_SOURCE_DIR}/${yacc_file}"
			"${CMAKE_CURRENT_BINARY_DIR}/bison/${yacc_name}.cpp")
	list(APPEND SOURCE "${BISON_${yacc_name}_OUTPUTS}")
endforeach()

add_library(ghidra_decompiler STATIC ${SOURCE})
target_include_directories(ghidra_decompiler PRIVATE "${DECOMPILER_SOURCE_DIR}")

# "decompile" executable as used by Ghidra
if(BUILD_DECOMPILE_EXECUTABLE)
	add_executable(ghidra_decompiler_exec ${DECOMPILER_SOURCE_GHIDRA_CXX})
	target_link_libraries(ghidra_decompiler_exec ghidra_decompiler)
	set_target_properties(ghidra_decompiler_exec PROPERTIES OUTPUT_NAME decompile)
endif()
